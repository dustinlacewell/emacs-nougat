* org-mode
[[https://orgmode.org/manual/Search-options.html#Search-options][Org-mode]] is the absolute pinnacle in personal organization and planning
systems. Including outlining, task tracking with states, priorities, scheduling and
deadlines. The features go on-and-on.

** straight.el fixes
There are some issues with straight.el and org. These the following boilerplate fixes
all that until [[https://github.com/raxod502/straight.el#installing-org-with-straightel][that is resolved]].
*** fix-org-git-version
#+begin_src emacs-lisp
  (defun fix-org-git-version ()
    "The Git version of org-mode.
    Inserted by installing org-mode or when a release is made."
    (require 'git)
    (let ((git-repo (expand-file-name
                     "straight/repos/org/" user-emacs-directory)))
      (string-trim
       (git-run "describe"
                "--match=release\*"
                "--abbrev=6"
                "HEAD"))))
#+end_src

*** fix-org-release
#+begin_src emacs-lisp
  (defun fix-org-release ()
    "The release version of org-mode.
    Inserted by installing org-mode or when a release is made."
    (require 'git)
    (let ((git-repo (expand-file-name
                     "straight/repos/org/" user-emacs-directory)))
      (string-trim
       (string-remove-prefix
        "release_"
        (git-run "describe"
                 "--match=release\*"
                 "--abbrev=0"
                 "HEAD")))))
#+end_src

** installation
#+begin_src emacs-lisp
  (use-package org
    :mode ("\\.org\\'" . org-mode)
    :config
    ;; This forces straight to load the package immediately in an attempt to avoid the
    ;; Org that ships with Emacs.
    (require 'org)

    ;; these depend on the 'straight.el fixes' above
    (defalias #'org-git-version #'fix-org-git-version)
    (defalias #'org-release #'fix-org-release)

    ;; Enable org capture
    (require 'org-capture)

    ;; Enable templates like <s
    (require 'org-tempo)

    (define-kbd-or
      org-mode-map 'outline-next-visible-heading "M-n"
      org-mode-map 'outline-previous-visible-heading "M-p"
      org-mode-map 'org-insert-heading "M-RET"))
#+end_src

** look
The following sections change how Org-mode documents look.
*** indent by header level
Hide the heading asterisks. Instead indent headings based on depth.
#+begin_src emacs-lisp
  (with-eval-after-load 'org
    (add-hook 'org-mode-hook #'org-indent-mode))
#+end_src

*** pretty heading bullets
Use nice unicode bullets instead of the default asterisks.
#+begin_src emacs-lisp
  (use-package org-bullets
    :after (org)
    :config
    (add-hook 'org-mode-hook 'org-bullets-mode))
#+end_src

*** pretty todo states
Instead of the default =TODO= and =DONE= states, use some interesting unicode
characters. Use =C-c C-t= to cycle through states.
#+begin_src emacs-lisp
  (with-eval-after-load 'org
    (setq org-todo-keywords '((sequence "…" "⏩" "|" "✔"))))
#+end_src

*** pretty priority cookies
Instead of the default =[#A]= and =[#C]= priority cookies, use little unicode arrows to
indicate high and low priority. =[#B]=, which is the same as no priority, is shown as
normal.
#+begin_src emacs-lisp
  (with-eval-after-load 'org
    (defun nougat/org-pretty-compose-p (start end match)
      (if (or (string= match "[#A]") (string= match "[#C]"))
          ;; prettify asterisks in headings
          (org-match-line org-outline-regexp-bol)
        ;; else rely on the default function
        (funcall #'prettify-symbols-default-compose-p start end match)))

    (global-prettify-symbols-mode)

    (add-hook
     'org-mode-hook
     (lambda ()
       (setq-local prettify-symbols-compose-predicate #'nougat/org-pretty-compose-p)
       (setq-local prettify-symbols-alist
                   '(("[#A]" . ?↟)
                     ("[#C]" . ?↡))))))
#+end_src

*** pretty heading ellipsis
#+begin_src emacs-lisp
  (with-eval-after-load 'org
    (setq org-ellipsis " ▿"))
#+end_src

*** theme customizations
#+begin_src emacs-lisp
(use-package org-beautify-theme
  :after (org)
  :config
  (setq org-fontify-whole-heading-line t)
  (setq org-fontify-quote-and-verse-blocks t)
  (setq org-hide-emphasis-markers t)
  (let* ((background-color (face-background 'default nil 'default))
         (padding nil))
    (custom-theme-set-faces
     'org-beautify
     `(org-document-title
       ((t (:inherit org-level-1
                     :height 2.0
                     :underline nil
                     :box ,padding))))
     `(org-level-1
       ((t (:height 1.5 :
                    box ,padding))))
     `(org-level-2
       ((t
         (:height 1.25
                  :box ,padding))))
     `(org-level-3
       ((t (:box ,padding))))
     `(org-ellipsis
       ((t (:inherit org-level-faces))))
     `(org-list-dt
       ((t
         (:inherit default
                   :height 2.0))))
     `(org-meta-line
       ((t (:slant italic
                   :height 0.9
                   :foreground "#777777"))))
     `(org-agenda-structure
       ((t (:inherit default
                     :height 2.0
                     :underline nil))))
     `(org-document-info-keyword
       ((t (:inherit default
                     :height 0.8
                     :foreground "#AA7777"))))
     `(org-checkbox
       ((t (:box (:color "#93a1a1"
                         :style "released-button")))))
     `(org-block
       ((t (:background "#373737"
                        :box nil
                        :height 0.8
                        :family "Menlo"))))
     `(org-block-begin-line
       ((t (:height 0.8
                    :foreground "#777777"
                    :background "#222222"))))
     `(org-block-end-line
       ((t (:inherit org-block-begin-line))))
     `(org-quote
       ((t (:slant italic
                   :height 1.1)))))))
#+end_src

** feel
The following sections change how it feels to use Org-mode.
*** don't fold blocks on open
#+begin_src emacs-lisp
  (with-eval-after-load 'org
    (setq org-hide-block-startup nil))
#+end_src

*** auto-fill paragraphs
#+begin_src emacs-lisp
  (with-eval-after-load 'org
    (add-hook 'org-mode-hook 'turn-on-auto-fill))
#+end_src

*** respect content on heading insert
If you try to insert a heading in the middle of an entry, don't split it in half, but
instead insert the new heading after the end of the current entry.

#+begin_src emacs-lisp
  (with-eval-after-load 'org
    (setq org-insert-heading-respect-content nil))
#+end_src

*** ensure one-line between headers
When you save, this section will ensure that there is a one-line space between each
heading. This helps with the background color of code-blocks not showing up on folded
headings.
#+begin_src emacs-lisp
  (with-eval-after-load 'org
    (defun org-mode--ensure-one-blank-line ()
      (save-excursion
        (goto-char (point-min))
        (while (re-search-forward "#\\+[a-z_]+\\s-\\*" nil t)
          (replace-match "#+end_src

  ,*")
          (call-interactively 'org-previous-visible-heading)
          (call-interactively 'org-cycle)
          (call-interactively 'org-cycle))
        (org-save-outline-visibility t
          (org-mode))))

    (add-hook
     'org-mode-hook
     (lambda () (add-hook
                 'before-save-hook
                 'org-mode--ensure-one-blank-line
                 nil 'make-it-local))))
#+end_src

** org-babel
*** add languages to babel
#+begin_src emacs-lisp
  (with-eval-after-load 'org
    (org-babel-do-load-languages
     'org-babel-load-languages
     '((shell . t)
       (emacs-lisp . t))))
#+end_src

*** set default header args
#+begin_src emacs-lisp
  (with-eval-after-load 'org
    (setq org-babel-default-header-args
          '((:session . "none")
            (:results . "silent")
            (:exports . "code")
            (:cache . "no")
            (:noweb . "no")
            (:hlines . "no")
            (:tangle . "no"))))
#+end_src

*** disable code evaluation prompts
#+BEGIN_SRC elisp
  (with-eval-after-load 'org
    (setq org-confirm-babel-evaluate nil)
    (setq org-confirm-shell-link-function nil)
    (setq org-confirm-elisp-link-function nil))
#+END_SRC

** org-capture
*** set default notes file
#+begin_src emacs-lisp
  (with-eval-after-load 'org
    (setq org-default-notes-file
          (expand-file-name (var-or 'nougat-capture-target "~/org/notes.org"))))
#+end_src

*** bind a key for capture
#+begin_src emacs-lisp
  (with-eval-after-load 'org
    (global-set-key (kbd "C-c c") 'org-capture))
#+end_src

*** automatically visit new capture
#+begin_src emacs-lisp
  (with-eval-after-load 'org
    (add-to-list 'org-capture-after-finalize-hook 'org-capture-goto-last-stored))
#+end_src


