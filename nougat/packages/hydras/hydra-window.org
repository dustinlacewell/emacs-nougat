* hydra-window
#+begin_src emacs-lisp
  (use-package ace-window)
  (winner-mode 1)

  (nougat-hydra hydra-window (:color red)
    ("Jump"
     (("h" windmove-left "left")
      ("l" windmove-right "right")
      ("k" windmove-up "up")
      ("j" windmove-down "down")
      ("a" ace-select-window "ace"))
     "Split"
     (("q" split-window-right "left")
      ("r" (progn (split-window-right) (call-interactively 'other-window)) "right")
      ("e" split-window-below "up")
      ("w" (progn (split-window-below) (call-interactively 'other-window)) "down"))
     "Do"
     (("d" delete-window "delete")
      ("o" delete-other-windows "delete others")
      ("u" winner-undo "undo")
      ("R" winner-redo "redo")
      ("t" nougat-hydra-window-toggle "toggle"))))
#+end_src

*** Toggle Window Split
#+begin_src emacs-lisp
  (defun nougat-hydra-window-toggle (&optional arg)
      "Switch between 2 windows split horizontally or vertically.
      With ARG, swap them instead."
      (interactive "P")
      (unless (= (count-windows) 2)
        (user-error "Not two windows"))
      ;; Swap two windows
      (if arg
          (let ((this-win-buffer (window-buffer))
                (next-win-buffer (window-buffer (next-window))))
            (set-window-buffer (selected-window) next-win-buffer)
            (set-window-buffer (next-window) this-win-buffer))
        ;; Swap between horizontal and vertical splits
        (let* ((this-win-buffer (window-buffer))
               (next-win-buffer (window-buffer (next-window)))
               (this-win-edges (window-edges (selected-window)))
               (next-win-edges (window-edges (next-window)))
               (this-win-2nd (not (and (<= (car this-win-edges)
                                           (car next-win-edges))
                                       (<= (cadr this-win-edges)
                                           (cadr next-win-edges)))))
               (splitter
                (if (= (car this-win-edges)
                       (car (window-edges (next-window))))
                    'split-window-horizontally
                  'split-window-vertically)))
          (delete-other-windows)
          (let ((first-win (selected-window)))
            (funcall splitter)
            (if this-win-2nd (other-window 1))
            (set-window-buffer (selected-window) this-win-buffer)
            (set-window-buffer (next-window) next-win-buffer)
            (select-window first-win)
            (if this-win-2nd (other-window 1))))))
#+end_src

