#+title: ldlework's init.el
#+description: A literate programming style exposition of my Emacs configuration
#+language: en
#+startup: overview indent align
#+babel: :cache no
#+options: ^:nil num:nil tags:nil
#+html_head: <link rel="stylesheet" type="text/css" href="https://www.pirilampo.org/styles/readtheorg/css/htmlize.css"/>
#+html_head: <link rel="stylesheet" type="text/css" href="https://www.pirilampo.org/styles/readtheorg/css/readtheorg.css"/>
#+html_head: <script src="https://ajax.googleapis.com/ajax/libs/jquery/2.1.3/jquery.min.js"></script>
#+html_head: <script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.4/js/bootstrap.min.js"></script>
#+html_head: <script type="text/javascript" src="https://www.pirilampo.org/styles/lib/js/jquery.stickytableheaders.js"></script>
#+html_head: <script type="text/javascript" src="https://www.pirilampo.org/styles/readtheorg/js/readtheorg.js"></script>
#+html_head: <script type="text/" src="https://www.pirilampo.org/styles/readtheorg/js/readtheorg.js"></script>

* setup

The following sections take care of bootstrapping =straight.el= and defining some
utility elisp that is used throughout the rest of the configuration.

#+INCLUDE: "../nougat/required.org"

** personal helpers
Some helper function's I've defined to help generate paths relevant to my system and
data.
*** my/org-path-name
#+begin_src emacs-lisp
  (defvar my/org-path-name
    (expand-file-name "~/org/")
    "Root path-name for org-mode files")
#+end_src

*** my/org-file-name
#+begin_src emacs-lisp
  (defun my/org-file-name (file-name)
    "Create file-name relative to my/org-path-name"
    (concat my/org-path-name file-name))
#+end_src

*** my/notes-file-name
#+begin_src emacs-lisp
  (defvar my/notes-file-name
    (my/org-file-name "notes.org")
    "Main notes file-name")
#+end_src

*** my/template-directory
#+begin_src emacs-lisp
  (setq-default my/template-directory (concat my/org-path-name "templates/"))
#+end_src

*** my/template-file-name
#+begin_src emacs-lisp
  (defun my/template-file-name (file-name)
    "Create file-name relative to my/template-directory"
    (concat my/template-directory file-name))
#+end_src

*** my/project-root
#+begin_src emacs-lisp
  (setq-default my/project-root (expand-file-name "~/src/"))
#+end_src

*** my/project-directory
#+begin_src emacs-lisp
  (defun my/project-directory (name)
    (concat my/project-root name))
#+end_src

*** setup external browser
#+begin_src emacs-lisp
  (setq browse-url-browser-function 'browse-url-chrome)
  (setq browse-url-chrome-program "google-chrome-unstable")
#+end_src

* nixos
NixOS ZSH module drops some PATH modification stuff in =~/.config/zsh/.zshrc= which
causes the following message on startup:
#+begin_src text
  You appear to be setting environment variables ("PATH") in your .bashrc or .zshrc:
  those files are only read by interactive shells, so you should instead set
  environment variables in startup files like .profile, .bash_profile or .zshenv.
  Refer to your shell’s man page for more info.

  Customize ‘exec-path-from-shell-arguments’ to remove "-i" when done, or disable
  ‘exec-path-from-shell-check-startup-files’ to disable this message.
#+end_src

The following line prevents the warning above:

#+begin_src emacs-lisp
  (setq exec-path-from-shell-check-startup-files nil)
#+end_src

* badger-theme

My favorite theme, available [[https://github.com/ccann/badger-theme][here]].

#+begin_src emacs-lisp
  (use-package badger-theme
    :config (load-theme 'badger t))
#+end_src

** default font
#+begin_src emacs-lisp
  (set-face-attribute 'default nil :family "Source Code Pro" :height 145 :weight 'light)
#+end_src

** blend in the fringes
#+begin_src emacs-lisp
  (set-face-attribute 'fringe nil :background nil)
#+end_src

** helper for getting colors
#+begin_src emacs-lisp
  (defun badger-color (name)
    (let ((name (format "badger-%s" name)))
      (cdr (assoc name badger-colors-alist))))

  ;; (badger-color "bg")
#+end_src

* emacs
The following sections customize core Emacs settings.
#+INCLUDE: "../nougat/emacs/autosaves.org"
#+INCLUDE: "../nougat/emacs/backups.org"
#+INCLUDE: "../nougat/emacs/cursor.org"
#+INCLUDE: "../nougat/emacs/disable.org"
#+INCLUDE: "../nougat/emacs/editing.org"
#+INCLUDE: "../nougat/emacs/key-bindings.org"
#+INCLUDE: "../nougat/emacs/minor-modes.org"
** exec-path from shell
#+begin_src emacs-lisp
  (use-package exec-path-from-shell
    :config
    (when (memq window-system '(mac ns x))
      (exec-path-from-shell-initialize)))
#+end_src

** eyeliner for modeline
#+begin_src emacs-lisp
  (use-package eyeliner
    ;; :straight (eyeliner :type git :host github :repo "dustinlacewell/eyeliner")
    :straight (eyeliner :local-repo "~/src/eyeliner")

    :init
    (setq eyeliner/warm-color (badger-color "salmon"))
    (setq eyeliner/cool-color (badger-color "blue"))
    (setq eyeliner/plain-color "#FFFFFF")

    :config
    (require 'eyeliner)
    (spaceline-helm-mode 1)
    (custom-set-faces
     `(powerline-active2
       ((t (:background ,(badger-color "bg")))))
     `(powerline-inactive2
       ((t (:background ,(badger-color "bg"))))))
    (eyeliner/install))
#+end_src

* org-mode
#+INCLUDE: "../nougat/packages/org.org::org-mode" :only-contents t
* projectile
#+INCLUDE: "../nougat/packages/projectile.org::Projectile" :only-contents t
* helm
#+INCLUDE: "../nougat/packages/helm.org::*Helm" :only-contents t
** theme customizations
#+begin_src emacs-lisp
  (set-face-attribute
   'helm-selection nil
   :inherit t
   :background (badger-color "bg+1")
   :foreground nil
   :height 1.0
   :weight 'ultra-bold
   :inverse-video nil)

  (set-face-attribute
   'helm-source-header nil
   :inherit nil
   :underline nil
   :background (badger-color "bg")
   :foreground (badger-color "dull-red")
   :height 1.9)

  (set-face-attribute
   'helm-header nil
   :inherit nil
   :height 0.8
   :background (badger-color "bg")
   :foreground (badger-color "teal"))

  (set-face-attribute
   'helm-separator nil
   :height 0.8
   :foreground (badger-color "salmon"))

  (set-face-attribute
   'helm-match nil
   :weight 'bold
   :foreground (badger-color "olive"))

#+end_src

* magit
#+INCLUDE: "../nougat/packages/magit.org::Magit" :only-contents t
* elfeed
** boilerplate
#+begin_src emacs-lisp
    (defun advice-unadvice (sym)
      "Remove all advices from symbol SYM."
      (interactive "aFunction symbol: ")
      (advice-mapc (lambda (advice _props) (advice-remove sym advice)) sym))

    (defun elfeed-font-size-hook ()
      (buffer-face-set '(:height 1.35)))

    (defun elfeed-visual-fill-hook ()
      (visual-fill-column-mode--enable))

    (defun elfeed-show-refresh-advice (entry)
      (elfeed-font-size-hook)
      (visual-fill-column-mode 1)
      (setq word-wrap 1)
      (elfeed-show-refresh))

    (defun elfeed-show ()
      (interactive)
      (elfeed)
      (delete-other-windows))
#+end_src

** setup
#+begin_src emacs-lisp
  (use-package elfeed
    :bind (("C-x w" . elfeed-show))
    :config
    (add-hook 'elfeed-search-update-hook 'elfeed-font-size-hook)
    (advice-unadvice 'elfeed-show-entry)
    (advice-add 'elfeed-show-entry :after 'elfeed-show-refresh-advice))

  (use-package elfeed-org
    :after (elfeed)
    :config
    (elfeed-org)
    (setq rmh-elfeed-org-files (list "~/org/notes.org")))
#+end_src

* language support
#+INCLUDE: "../nougat/support/applescript.org"
#+INCLUDE: "../nougat/support/elisp.org"
#+INCLUDE: "../nougat/support/markdown.org"
#+INCLUDE: "../nougat/support/python.org"
#+INCLUDE: "../nougat/support/typescript.org"
#+INCLUDE: "../nougat/support/yaml.org"
** f#
#+INCLUDE: "../nougat/support/fsharp.org::f#" :only-contents t

#+BEGIN_SRC emacs-lisp
  (with-eval-after-load 'fsharp-mode
    (add-to-list 'exec-path "/nix/var/nix/profiles/default/bin")
    (add-to-list 'exec-path (expand-file-name "~/.nix-profile/bin"))
    (add-to-list 'auto-mode-alist '("\\.fs[iylx]?$" . fsharp-mode)))
#+END_SRC

* tooling support
#+INCLUDE: "../nougat/support/docker.org"
#+INCLUDE: "../nougat/support/nix.org"
* hydra

#+include: "../nougat/packages/hydra.org::Hydra" :only-contents t
#+include: "../nougat/packages/hydras/hydra-bookmarks.org"
#+include: "../nougat/packages/hydras/hydra-help.org"
#+include: "../nougat/packages/hydras/hydra-mark.org"
#+include: "../nougat/packages/hydras/hydra-projectile.org"
#+include: "../nougat/packages/hydras/hydra-register.org"
#+include: "../nougat/packages/hydras/hydra-window.org"
#+include: "../nougat/packages/hydras/hydra-yank-pop.org"
#+include: "../nougat/packages/hydras/hydra-zoom.org"
#+include: "../nougat/packages/hydras/major-modes/emacs-lisp-mode.org"
#+include: "../nougat/packages/hydras/major-modes/org-mode.org"

#+begin_src emacs-lisp
  (global-set-key (kbd "C-<f19>") 'major-mode-hydra)
#+end_src

* spotify
#+begin_src emacs-lisp
  ;; (use-package spot4e
  ;;   :straight (spot4e :type git :host github :local-repo "~/src/spot4e")
  ;;   :config
  ;;   (setq spot4e-refresh-token "AQDA5zMq9Juoi76685iFALQWp17uWpZVTCPCqTMI2rZFUwX-lmH7Z9idbhPM-SBbTXYWYNyL9pwgEoazggQXZe3kpeavxS4DJYdg5d-5pHKRYpv_jZLx2vUr1pIxZvcz8_k")
  ;;   (setq spot4e-access-token nil)
  ;;   (run-with-timer 0 (* 60 59) 'spot4e-refresh))

  ;; (spot4e-authorize)

  ;; (pretty-hydra-define hydra-spotify (:color red :hint nil)
  ;;   ("Player" (("h" (spot4e-player-next) "next")
  ;;              ("l" (spot4e-player-previous) "previous")
  ;;              ("j" (spot4e-player-pause) "pause")
  ;;              ("k" (spot4e-player-play) "play")
  ;;              ("v" (spot4e-set-volume) "volume"))

  ;;    "Search" (("t" (spot4e-helm-search-tracks) "tracks")
  ;;              ("a" (spot4e-helm-search-artists) "artists" :push t)
  ;;              ("A" (spot4e-helm-search-albums ) "albums")
  ;;              ("r" (spot4e-helm-search-recent-tracks ) "recent")
  ;;              ("c" (spot4e-helm-search-categories) "categories")))
  ;;   (("<f19>" (hera-pop) "nil" :color blue)
  ;;    ("R" (spot4e-refresh) "nil" :color red)))

  ;; (hydra-spotify/body)
#+end_src

* entrypoint
** ep-notes-file
#+begin_src emacs-lisp
  (setq ep-notes-file (my/org-file-name "notes.org"))
#+end_src

** ep-notes-find-file
#+begin_src emacs-lisp
  (defun ep-notes-find-file () (find-file ep-notes-file))
#+end_src

** ep-notes-visit
#+begin_src emacs-lisp
  (defun ep-notes-visit (&rest olp) (org-olp-visit ep-notes-file olp))
  ;; (ep-notes-visit "Workiva" "Runbooks")
#+end_src

** ep-notes-select-then-visit
#+begin_src emacs-lisp
  (defun ep-notes-select-then-visit (&rest olp) (org-olp-select-then-visit ep-notes-file olp))
  ;; (ep-notes-select-then-visit "Workiva" "Tasks")
#+end_src

** hydra-default

#+begin_src emacs-lisp
  (nougat-hydra hydra-default (:color blue)
    ("Editing"
     (("p" (hera-push 'hydra-projectile/body) "projectile")
      ("r" (hera-push 'hydra-registers/body) "registers")
      ("m" (hera-push 'hydra-mark/body) "mark"))
     "UI"
     (("w" (hera-push 'hydra-window/body) "windows")
      ("z" (hera-push 'hydra-zoom/body) "zoom"))
     "Help"
     (("h" (hera-push 'hydra-help/body) "help"))))

  (global-set-key (kbd "<f19>") (lambda () (interactive) (hera-start 'hydra-default/body)))


#+end_src

