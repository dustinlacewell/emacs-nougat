* Personal global variables
** org-path-name
#+begin_src emacs-lisp
  (defvar my/org-path-name (expand-file-name "~/Organization/"))
#+end_src

** org-file-name
#+begin_src emacs-lisp
  (defun my/make-org-file-name (file-name)
    (concat my/org-path-name file-name))
#+end_src

** notes-file-name
#+begin_src emacs-lisp
  (defvar my/notes-file-name (my/make-org-file-name "notes.org"))
#+end_src

** template-directory
#+begin_src emacs-lisp
  (defvar my/template-directory (concat my/org-path-name "templates"))
#+end_src

** project-directory
#+begin_src emacs-lisp
  (setq projectile-project-directory (expand-file-name "~/Projects"))
#+end_src

* Package management
#+INCLUDE: "../nougat/package-management/straight.org::bootstrap"
#+INCLUDE: "../nougat/package-management/straight.org::use-package integration"

* Theme

#+begin_src emacs-lisp
  (use-package sublime-themes
    :config (load-theme 'brin t))
#+end_src

* Emacs

#+INCLUDE: "../nougat/emacs/autosaves.org"
#+INCLUDE: "../nougat/emacs/backups.org"
#+INCLUDE: "../nougat/emacs/cursor.org"
#+INCLUDE: "../nougat/emacs/disable.org"
#+INCLUDE: "../nougat/emacs/editing.org"
#+INCLUDE: "../nougat/emacs/key-bindings.org"
#+INCLUDE: "../nougat/emacs/minor-modes.org"
#+INCLUDE: "../nougat/emacs/modeline.org"

** exec-path from shell
#+begin_src emacs-lisp
  (use-package exec-path-from-shell
    :config
    (when (memq window-system '(mac ns x))
      (exec-path-from-shell-initialize)))
#+end_src

* org-mode
#+INCLUDE: "../nougat/packages/org-mode/setup.org::setup"
#+INCLUDE: "../nougat/packages/org-mode/setup.org::look"
#+INCLUDE: "../nougat/packages/org-mode/setup.org::feel"
#+INCLUDE: "../nougat/packages/org-mode/extras/org-babel.org"
#+INCLUDE: "../nougat/packages/org-mode/extras/org-capture.org"
#+INCLUDE: "../nougat/packages/org-mode/extras/org-tidy.org"
#+INCLUDE: "../nougat/packages/org-mode/extras/nested-narrowing.org"
#+INCLUDE: "../nougat/packages/org-mode/extras/dynamic-tag-position.org"
** org-capture
#+INCLUDE: "../nougat/packages/org-mode/extras/org-capture.org::set default notes file"
#+INCLUDE: "../nougat/packages/org-mode/extras/org-capture.org::bind a key for capture"
#+INCLUDE: "../nougat/packages/org-mode/extras/org-capture.org::automatically visit new capture"
*** capture templates
#+begin_src emacs-lisp
    (setq org-capture-templates
        '(
        ("w" "Work")

        ("wl" "Work Log" entry
         (file+olp+datetree my/notes-file-name "Mozilla" "Worklog")
         "* %<%l:%M %p> - %?")))
#+end_src

* Languages
** Lisp
#+INCLUDE: "../nougat/support/lisp/lispy-mode.org"

** Python
#+INCLUDE: "../nougat/support/python/jedi.org"
#+INCLUDE: "../nougat/support/python/elpy.org"

** Markdown
#+INCLUDE: "../nougat/support/markdown/markdown-mode.org"
** Go
#+INCLUDE: "../nougat/support/golang/golang.org"
* Tools
** Docker
#+INCLUDE: "../nougat/support/docker/dockerfile-mode.org"

** Git
#+INCLUDE: "../nougat/packages/magit/setup.org"
* Projectile
#+INCLUDE: "../nougat/packages/projectile/setup.org"
#+INCLUDE: "../nougat/packages/projectile/discover-projects.org"

* Helm
#+INCLUDE: "../nougat/packages/helm/setup.org"
#+INCLUDE: "../nougat/packages/helm/extras/ace-jump-helm-line.org"
#+INCLUDE: "../nougat/packages/helm/extras/helm-ag.org"
#+INCLUDE: "../nougat/packages/helm/extras/helm-bookmark.org"
#+INCLUDE: "../nougat/packages/helm/extras/helm-company.org"
#+INCLUDE: "../nougat/packages/helm/extras/helm-descbinds.org"
#+INCLUDE: "../nougat/packages/helm/extras/helm-flyspell.org"
#+INCLUDE: "../nougat/packages/helm/extras/helm-org-rifle.org"
#+INCLUDE: "../nougat/packages/helm/extras/helm-projectile.org"

